#+xcvb (module (:depends-on ("utilities" "syntax")))
(in-package :kilns)

(defgeneric free-names (process)
  (:documentation "Process -> {Name}")
  (:method ((process null-process))
    '())
  (:method ((process name))
    (list process))
  (:method ((process process-variable))
    '())
  (:method ((process restriction))
    (set-difference (free-names (process process)) (list (name process))))
  (:method ((process kell))
    (reduce #'union
            (list (free-names (name process))
                  (free-names (process process))
                  (free-names (continuation process)))))
  (:method ((process message))
    (reduce #'union
            (list (free-names (name process))
                  (free-names (process process))
                  (free-names (continuation process)))))
  (:method ((process parallel-composition))
    (reduce #'union
            (mapcar #'free-names (processes process))))
  (:method ((process trigger))
    (union (free-names (pattern process))
           (set-difference (free-names (process process))
                           (bound-names (pattern process))))))

(defgeneric free-variables (process)
  (:documentation "Process -> {ProcessVariable}")
  (:method ((process null-process))
    '())
  (:method ((process name))
    '())
  (:method ((process process-variable))
    (list process))
  (:method ((process restriction))
    (set-difference (free-variables (process process)) (list (name process))))
  (:method ((process kell))
    (union (free-variables (process process))
           (free-variables (continuation process))))
  (:method ((process message))
    (union (free-variables (process process))
           (free-variables (continuation process))))
  (:method ((process parallel-composition))
    (reduce #'union
            (mapcar #'free-variables (processes process))))
  (:method ((process trigger))
    (set-difference (free-variables (process process))
                    (bound-variables (pattern process)))))

(defmethod structurally-congruent ((left pattern) (right pattern))
  (and (set= (free-names left) (free-names right))
       (set= (channel-names left) (channel-names right))
       (set= (union (bound-names left) (bound-variables left))
             (union (bound-names right) (bound-variables right)))))

(defgeneric message-match (language pattern message)
  (:documentation "Each pattern language must implement this method for pairs of
                  local-message, down-message, up-message, and kell-message"))

(defmethod match (patterns annotated-messages)
  (reduce #'union
          (mapcar (lambda (message-set)
                    (dotimes (j (length patterns))
                      (message-match *current-pattern-language*
                                     (aref patterns j)
                                     (aref annotated-messages j))))
                  (permute annotated-messages))))

(defgeneric channel-names (language pattern)
  (:documentation "the multiset of channel names on which the pattern expects
                  messages or kells"))
